package encryption.impl.algorithm;

import encryption.impl.SP;
import encryption.impl.byteMatrix.ByteMatrix;
import encryption.impl.byteMatrix.Bytes;

import java.util.HashMap;
import java.util.Objects;

/**
 * AE/AES
 * SP网络密码结构（代换-置换网络）
 * S-substitution替换
 * P-permute置换
 * 分组长度取128
 * 特点：扩散层和混淆层分层清晰明了，且交错施加
 * 对称加密算法都有共同的一个特征：加密算法和解密算法关于中间的密码对称 ，整体表现为一个密码施加栈。
 */
public class AdvancedEncrypt extends SP<ByteMatrix> {

    protected int groupSize = 128;

    private static AdvancedEncrypt instance;
    private static ByteMatrix key;

    private AdvancedEncrypt(String keyStr) {
        super(keyStr, SYMMETRIC_LONG_BIT, DEFAULT_CRYPT_TIME);
//        System.out.println("AES已实例化");
    }

    public static AdvancedEncrypt getInstance(String key) {
        if (instance == null) {
            instance = new AdvancedEncrypt(key);
        }
        return instance;
    }

    @Override
    protected ByteMatrix convertString(String text) {
        if (Objects.isNull(text)) {
            throw new NullPointerException("key is null");
        }
        return ByteMatrix.valueOf(text);
    }

    protected String recoverString(ByteMatrix byteMatrix) {
        if (byteMatrix == null) {
            throw new NullPointerException("byteMatrix is null");
        }
        return byteMatrix.toCharacters();
    }

    /**
     * 按密钥长度分为AES128,AES192,AES256三种密钥模式
     * 区别仅在密钥长度和加密轮数不同
     * 128bit密钥---10轮
     * 192bit密钥---12轮
     * 256bit密钥---14轮
     */
    private static final HashMap<Integer, Integer> CRYPT_TIMES = new HashMap<>();

    static {
        CRYPT_TIMES.put(128, 10);
        CRYPT_TIMES.put(192, 12);
        CRYPT_TIMES.put(256, 14);
    }

    private static final int keyBitLength = 192;
    private static final int keyStrLength = keyBitLength / Character.SIZE;
    private final int cryptTime = CRYPT_TIMES.get(keyBitLength);


    private static final int[] S = {
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
    };

    private static final int[] RS = {
            0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
            0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
            0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
            0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
            0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
            0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
            0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
            0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
            0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
            0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
            0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
            0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
            0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
            0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
            0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
    };

    private static final byte[][] C = {
            {0x02, 0x03, 0x01, 0x01},
            {0x01, 0x02, 0x03, 0x01},
            {0x01, 0x01, 0x02, 0x03},
            {0x03, 0x01, 0x01, 0x02}
    };

    private static final byte[][] RC = {
            {0x0e, 0x0b, 0x0d, 0x09},
            {0x09, 0x0e, 0x0b, 0x0d},
            {0x0d, 0x09, 0x0e, 0x0b},
            {0x0b, 0x0d, 0x09, 0x0e}
    };

    /**
     * 字节替换
     *
     * @param msg
     * @param cryptTime
     * @return
     */
    @Override
    protected ByteMatrix S(ByteMatrix msg, int cryptTime) {
        return msg.substitute(S);
    }

    /**
     * 行移位、列混合
     *
     * @param msg
     * @param cryptTime
     * @return
     */
    private final ByteMatrix C_MATRIX = new ByteMatrix(C);

    @Override
    protected ByteMatrix P(ByteMatrix msg, int cryptTime) {
        msg = msg.leftShift();
        if (this.isEncryptInvalid(cryptTime)) {
            return msg;
        }
        //Focus check
        return msg.leftMultiply(this.C_MATRIX);
    }

    /**
     * 逆S层变换
     *
     * @param pwd
     * @param cryptTime
     * @return
     */
    @Override
    protected ByteMatrix SR(ByteMatrix pwd, int cryptTime) {
        return pwd.substitute(RS);
    }

    /**
     * 逆P层变换
     *
     * @param pwd
     * @param cryptTime
     * @return
     */
    private final ByteMatrix RC_MATRIX = new ByteMatrix(RC);

    @Override
    protected ByteMatrix PR(ByteMatrix pwd, int cryptTime) {
        if (!this.isDecryptInvalid(cryptTime)) {
            pwd = pwd.leftMultiply(this.RC_MATRIX);
        }
        return pwd.rightShift();
    }

    /**
     * 自定义的异或运算
     *
     * @param byteMatrix
     * @param key
     * @return
     */
    @Override
    protected ByteMatrix XOR(ByteMatrix byteMatrix, ByteMatrix key) {
        if (byteMatrix == null) {
            throw new NullPointerException("XOR:byteMatrix must not be null!");
        }
        return byteMatrix.xor(key);
    }

    /**
     * 用initKey扩展轮密钥
     *
     * @param initKey
     * @param cryptTime
     * @return
     */
    @Override
    protected ByteMatrix[] extendKeys(ByteMatrix initKey, int cryptTime) {
        if (initKey == null) {
            throw new NullPointerException("initKey : null");
        }
        int[] words = Bytes.to32BitWordsOfCols(initKey);
        final ByteMatrix[] byteMatrices = new ByteMatrix[cryptTime + 1];

        final int usize = words.length;
        //ints必须为一维数组，否则无法进行元素级别的迭代
        //赋初值
        final int[] ints = new int[(cryptTime + 1) * usize];
        System.arraycopy(words, 0, ints, 0, words.length);
        //迭代计算
        for (int i = usize; i < ints.length; i++) {
            if (i % usize == 0) {
                ints[i] = ints[i - usize] ^ T(ints[i - 1], i / usize);
                final int[] res = new int[usize];
                System.arraycopy(ints, i - usize, res, 0, usize);
                byteMatrices[(i - usize) / usize] = Bytes.toByteMatrixByCols(res);
            } else {
                ints[i] = ints[i - usize] ^ ints[i - 1];
            }
        }
        //最后一轮迭代结果的记录
        final int[] res = new int[usize];
        System.arraycopy(ints, ints.length - usize, res, 0, usize);
        byteMatrices[(ints.length - usize) / usize] = Bytes.toByteMatrixByCols(res);

        //返回结果
        return byteMatrices;
    }

    private static int[] R_CONSTANTS = {
            0x01000000, 0x02000000, 0x04000000, 0x08000000,
            0x10000000, 0x20000000, 0x40000000, 0x80000000,
            0x1b000000, 0x36000000
    };

    /**
     * T变换首轮密钥
     *
     * @param intVal
     * @param ri
     * @return
     */
    private int T(int intVal, int ri) {
        //循环左移位(int级别的)
        final int highByte = (intVal & 0xf000) >> 24;
        intVal <<= 8;
        intVal |= highByte;
        //S盒字节替换
        int res = this.substitute(intVal);
        //与对应Rcon异或
        res ^= R_CONSTANTS[(ri - 1) % R_CONSTANTS.length];
        return res;
    }

    /**
     * S盒变换
     *
     * @param byte4
     * @return
     */
    private int substitute(int byte4) {
        int res = 0;
        for (int i = 0; i < Integer.BYTES; i++) {
            int bytes = (byte4 >> (i * Byte.SIZE)) & 0x000f;
            final int r = S[bytes];
            res |= (r << (i * Byte.SIZE));
        }
        return res;
    }

    /**
     * 判断相应操作在该轮加密是否无效,是则跳过
     *
     * @param cryptTime
     * @return
     */
    @Override
    protected boolean isEncryptInvalid(int cryptTime) {
        return this.cryptTime == cryptTime;
    }

    /**
     * 判断相应操作在该轮解密是否无效,是则跳过
     *
     * @param cryptTime
     * @return
     */
    @Override
    protected boolean isDecryptInvalid(int cryptTime) {
        return this.cryptTime == cryptTime;
    }

}
